
静态方法

/*************************************************/

NimanEvents.listen

监听元素事件，返回事件管理对象
@param {Object} element 绑定事件的元素对象或元素id
@param {Object} stop 是否中断事件冒泡

var events=NimanEvents.listen('div');

/*************************************************/

NimanEvents.getSrcElement

通过事件对象，获得事件源
@param {Object} event 事件对象

var srcElement=NimanEvents.getSrcElement(event);

/*************************************************/

NimanEvents.findElement

从某个元素开始，上级父元素遍历，寻找元素
@param {Object} element 起始元素
@param {Object} callback 遍历回调，参数为当前遍历的元素
@param {Object} top 终止元素

NimanEvents.findElement(element,function(dom){
	//当前元素
},top)

/*************************************************/

NimanEvents.preventDefault

阻止事件默认行为
@param {Object} evt 事件对象

NimanEvents.preventDefault(event);

/*************************************************/

NimanEvents.stopEvent

停止事件冒泡
@param {Object} evt 事件对象

NimanEvents.stopEvent(event);

/*************************************************/

NimanEvents.observeElement

@param {Object} element 被监听的元素
@param {Object} type 事件名称
@param {Object} callback 响应函数
@param {Object} useCapture 是否只在捕获阶段处理事件


NimanEvents.stopObserveElement

@param {Object} element 被监听的元素
@param {Object} type 事件名称
@param {Object} callback 响应函数
@param {Object} useCapture 是否只在捕获阶段处理事件

var handler=function(evt){
	console.log(evt);
};

//绑定
NimanEvents.observeElement(element,'click',handler,false);
//解除绑定
NimanEvents.stopObserveElement(element,'click',handler,false);

/*************************************************/

NimanEvents.destroy

销毁监听器
@param {Object} element 绑定事件的元素

NimanEvents.destroy(element);

/*************************************************/

对象方法

var events=NimanEvents.listen(element);

/*************************************************/

events.on

监听事件
@param {Object} evtName 事件名称
@param {Object} scope 上下文，this指代对象
@param {Object} fun 事件响应方法
@param {Object} once 是否是一次性事件

events.un

解除监听事件
@param {Object} evtName 事件名称
@param {Object} scope 上下文，this指代对象
@param {Object} fun 事件响应方法

var handler=function(evt){
	console.log(evt);
};

events.on('click', null,handler, false);

events.un('click', null,handler);

/*************************************************/

events.emit

发射事件
@param {Object} evtName 事件名称
[@param..] 发射事件参数

//监听自定义事件
events.on('myEvent',null,function(arg1,arg2){
	console.log(arg1,arg2);
});

//发射自定义事件
events.emit('myEvent','arg1Value','arg2Value');

/*************************************************/

自定义事件

$movestart
$move
$down
$click
$right
$wheel
$wheeldown
$wheelup













